### YamlMime:UniversalReference
api_name: []
items:
- children:
  - prose.codeaccelerator.internals.signal_handler_util.add_signal_handlers
  fullName: prose.codeaccelerator.internals.signal_handler_util
  langs:
  - python
  module: prose.codeaccelerator.internals.signal_handler_util
  name: signal_handler_util
  source:
    id: signal_handler_util
    path: prose\codeaccelerator\internals\signal_handler_util.py
    remote:
      branch: HEAD
      path: prose\codeaccelerator\internals\signal_handler_util.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 0
  type: module
  uid: prose.codeaccelerator.internals.signal_handler_util
- fullName: prose.codeaccelerator.internals.signal_handler_util.add_signal_handlers
  langs:
  - python
  module: prose.codeaccelerator.internals.signal_handler_util
  name: add_signal_handlers
  source:
    id: add_signal_handlers
    path: prose\codeaccelerator\internals\signal_handler_util.py
    remote:
      branch: HEAD
      path: prose\codeaccelerator\internals\signal_handler_util.py
      repo: https://apidrop.visualstudio.com/Content%20CI/_git/ReferenceAutomation
    startLine: 56
  summary: '[http://man7.org/linux/man-pages/man7/signal.7.html](http://man7.org/linux/man-pages/man7/signal.7.html)

    Adds signal handlers to terminate gracefully.


    Here are the actions performed for signals based on default actions of those signals.


    1. Term: These are the signals whose default action is to terminate the process.
    For such signals,

    if their current signal handler is the default signal handler i.e. signal.SIG_DFL,
    this method overwrites it with

    terminate handler that just calls sys.exit(). If there is a non-default handler
    attached. it will execute it

    first before executing the terminate handler.

    E.g. SIGTERM, SIGINT, SIGHUP, SIGBREAK.


    2. Core: These are the signals whose default action is terminate the process and
    dump core. For such signals,

    if their current signal signal handler is the default signal handler i.e. signal.SIG_DFL,
    retains that default

    signal handler, the reason being we want to continue getting core dump. However
    if the signal handler for such

    signals is already overwritten, then overwrite once again with terminate handler
    such that the previous signal

    handler is called before the terminate handler (just as Term case).

    E.g. SIGQUIT, SIGILL, SIGABRT, SIGFPE, SIGSEGV


    3. Ign: For all the signals which has default action set to signal.SIG_IGN, this
    method will continue ignoring the

    signal and won''t register terminate handler.


    4. Kill: signal.SIGKILL and signal.SIGSTOP are the 2 signals that cannot be caught,
    blocked or ignored. This

    method continues to honor that.

    '
  syntax:
    content: add_signal_handlers()
  type: function
  uid: prose.codeaccelerator.internals.signal_handler_util.add_signal_handlers
references:
- fullName: prose.codeaccelerator.internals.signal_handler_util.add_signal_handlers
  isExternal: false
  name: add_signal_handlers
  parent: prose.codeaccelerator.internals.signal_handler_util
  uid: prose.codeaccelerator.internals.signal_handler_util.add_signal_handlers
